import streamlit as st
from dotenv import load_dotenv
import os
import shutil
from prepare_vector_DB import create_db_from_pdf_local_files, create_db_from_pdf_files
from QAbot import read_vectors_db_from_dic, create_QA_chain, load_llm, create_prompt

# Setup
DIRECTORY_PDF = "data"
DIRECTORY_VECTOR_DB = "vectorstore"
template = """S·ª≠ d·ª•ng th√¥ng tin sau ƒë√¢y ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi. 
N·∫øu kh√¥ng t√¨m th·∫•y c√¢u tr·∫£ l·ªùi trong ng·ªØ c·∫£nh, vui l√≤ng n√≥i "T√¥i kh√¥ng bi·∫øt". ƒê·ª´ng c·ªë b·ªãa ra m·ªôt c√¢u tr·∫£ l·ªùi.
    CONTEXT: {context}
    
    QUESTION: {question}"""
    

def delete_files(dir):
    for filename in os.listdir(dir):
        file_path = os.path.join(dir, filename)
        try:
            if os.path.isfile(file_path) or os.path.islink(file_path):
                os.unlink(file_path)
            elif os.path.isdir(file_path):
                shutil.rmtree(file_path)
        except Exception as e:
            print('')
            
            
def handle_userinput(user_question):
    response = st.session_state.conversation
    response_n = response.invoke({"query": user_question})
    st.write(response_n['result'])
            
def main():
    # setup apikey from .env
    load_dotenv()
    # set title 
    st.set_page_config(page_title='Chat with Multiple PDFs', page_icon='ü§ñ', layout='wide', initial_sidebar_state='auto')
    # setup input 
    st.header("Chat with Multiple PDFs")
    user_question = st.text_input("Ask me anything about the PDFs", key='question')
    
    # output
    if user_question:
        handle_userinput(user_question)
    else:
        st.text("Please enter your question to run")
    
    # sidebar
    with st.sidebar:
        st.subheader("Your doccuments")
        ## x√≥a c√°c file pdf, vector db c≈© trong th∆∞ m·ª•c khi reload web (n·∫øu c√≥ l∆∞u d·ªØ li·ªáu trong th∆∞ m·ª•c)
        # delete_files(DIRECTORY_PDF)
        # delete_files(DIRECTORY_VECTOR_DB)
        
        ## upload file pdf
        pdf_docs = st.file_uploader(
            "Upload your PDFs and click Process button", 
            type=['pdf'], 
            accept_multiple_files=True, 
            key='pdfs')
        
        ## L∆∞u d·ªØ li·ªáu t·∫£i l√™n v√†o th∆∞ m·ª•c data (d√πng khi c·∫ßn l∆∞u tr·ªØ file pdf v√†o 1 th∆∞ m·ª±c)
        # if pdf_docs is not None:
        #     for pdf_doc in pdf_docs:
        #         with open(os.path.join(DIRECTORY_PDF, pdf_doc.name), "wb") as f:
        #             f.write(pdf_doc.getbuffer())
                    
        if st.button("Process PDFs", key='process_pdfs'):
            with st.spinner("Processing PDFs..."):
                # vector db
                # db = create_db_from_files() # t·∫°o vector db t·ª´ c√°c file pdf trong th∆∞ m·ª•c data v√† l∆∞u v√†o th∆∞ m·ª•c vectorstore
                # db = read_vectors_db() # ƒë·ªçc vector db t·ª´ th∆∞ m·ª•c vectorstore
                db = create_db_from_pdf_files(pdf_docs) # t·∫°o vector db t·ª´ file pdf 
                
                # create llm model
                llm = load_llm()
                
                # create prompt template
                prompt = create_prompt(template=template)
                
                # create conversation chain
                st.session_state.conversation = create_QA_chain(prompt, llm, db) # l∆∞u tr·ªØ llm_chain

                # Add a message to indicate that llm_chain is ready
                st.success("llm_chain is ready!")
                
if __name__ == '__main__':
    main()



